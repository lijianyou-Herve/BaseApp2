apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'org.greenrobot.greendao'//GreenDao

def config = rootProject.ext.ver
def library = rootProject.ext.library

android {
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        applicationId "comte.example.herve.baseapp"

        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                JPUSH_PKGNAME: "comte.example.herve.baseapp",
                JPUSH_APPKEY : "9255930854c81695290e226c", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
        ndk {
            abiFilters 'x86', 'armeabi-v7a'
            //选择要添加的对应cpu类型的.so库。
            // 还可以添加 'armeabi', 'armeabi-v7a', 'armeabi-v8a'，'x86', 'x86_64', 'mips', 'mips64'
        }

        //指定jdk版本
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
    // AS3.0 自定义APK安装包名
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "BaseLibrary-v${variant.versionName}-${releaseTime()}-${variant.buildType.name}.apk"
        }
    }

//    signingConfigs {
//        release {
//            storeFile file(rootProject.ext.keystorePath)
//            storePassword rootProject.ext.keystorePassword
//            keyAlias rootProject.ext.alias
//            keyPassword rootProject.ext.aliasPassword
//        }
//    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

def static releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getDefault())
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha3', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //AndroidX Google支持库
    api library.appcompat
    api library.material
    api library.constraint

    api library.butterknife
    annotationProcessor library.butterknife_compiler
//    If you are using Kotlin, replace annotationProcessor with kapt.

    /*Json解析工具*/
    api library.gson

    /*生命周期绑定*/
    implementation library.autodispose
    implementation library.autodispose_archcomponents

    /*内存泄漏检测工具leakcanary*/
    //    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    //    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    //    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    testImplementation 'junit:junit:4.12'
    implementation project(':orm_library')
    implementation project(':common_library')
    implementation project(':http_library')
}
